# Makefile per VisitaDFS_Albero - Lez18
# Progetto: Implementazione visita Depth-First Search di alberi
# Autore: Alessandro Bilotti  
# Data: 11 agosto 2025

# ============================================================================
# CONFIGURAZIONE COMPILATORE
# ============================================================================

CXX = g++
CXXFLAGS = -Wall -Wextra -std=c++11 -pedantic
DEBUG_FLAGS = -g -DDEBUG -O0
RELEASE_FLAGS = -O2 -DNDEBUG
VALGRIND_FLAGS = --leak-check=full --show-leak-kinds=all --track-origins=yes

# ============================================================================
# FILE E DIRECTORY
# ============================================================================

# File sorgenti
SOURCES = main.cc tree.cc tipo.cc
HEADERS = tree.h tipo.h

# File oggetto
OBJECTS = $(SOURCES:.cc=.o)
OBJ_DIR = obj
OBJ_FILES = $(addprefix $(OBJ_DIR)/, $(OBJECTS))

# Eseguibile
TARGET = visitaDFS_albero
TARGET_DEBUG = $(TARGET)_debug

# File di output e test
OUTPUT_FILE = output.txt
TREE_DIAGRAM = tree_structure.txt

# ============================================================================
# TARGET PRINCIPALI
# ============================================================================

# Target predefinito
all: $(TARGET)

# Compilazione release
$(TARGET): $(OBJ_FILES)
	@echo "üîó Linking $(TARGET)..."
	$(CXX) $(CXXFLAGS) $(RELEASE_FLAGS) -o $@ $^
	@echo "‚úÖ $(TARGET) compilato con successo!"

# Compilazione debug
debug: $(TARGET_DEBUG)

$(TARGET_DEBUG): CXXFLAGS += $(DEBUG_FLAGS)
$(TARGET_DEBUG): $(OBJ_FILES)
	@echo "üêõ Linking $(TARGET_DEBUG)..."
	$(CXX) $(CXXFLAGS) -o $@ $^
	@echo "‚úÖ $(TARGET_DEBUG) compilato con successo!"

# ============================================================================
# COMPILAZIONE MODULI
# ============================================================================

# Creazione directory oggetti
$(OBJ_DIR):
	@echo "üìÅ Creazione directory $(OBJ_DIR)..."
	@mkdir -p $(OBJ_DIR)

# Compilazione main.cc
$(OBJ_DIR)/main.o: main.cc tree.h tipo.h | $(OBJ_DIR)
	@echo "üî® Compilazione main.cc..."
	$(CXX) $(CXXFLAGS) $(RELEASE_FLAGS) -c $< -o $@

# Compilazione tree.cc
$(OBJ_DIR)/tree.o: tree.cc tree.h tipo.h | $(OBJ_DIR)
	@echo "üî® Compilazione tree.cc..."
	$(CXX) $(CXXFLAGS) $(RELEASE_FLAGS) -c $< -o $@

# Compilazione tipo.cc
$(OBJ_DIR)/tipo.o: tipo.cc tipo.h | $(OBJ_DIR)
	@echo "üî® Compilazione tipo.cc..."
	$(CXX) $(CXXFLAGS) $(RELEASE_FLAGS) -c $< -o $@

# ============================================================================
# ESECUZIONE E TEST
# ============================================================================

# Esecuzione normale
run: $(TARGET)
	@echo "üöÄ Esecuzione di $(TARGET)..."
	@echo "üå≥ Output della serializzazione dell'albero:"
	./$(TARGET)
	@echo ""

# Esecuzione debug
run-debug: $(TARGET_DEBUG)
	@echo "üêõ Esecuzione debug di $(TARGET_DEBUG)..."
	@echo "üå≥ Output con informazioni di debug:"
	./$(TARGET_DEBUG)
	@echo ""

# Test con output salvato
test: $(TARGET)
	@echo "üß™ Test di $(TARGET) con salvataggio output..."
	./$(TARGET) > $(OUTPUT_FILE)
	@echo "üìÑ Output salvato in $(OUTPUT_FILE):"
	@cat $(OUTPUT_FILE)
	@echo ""
	@echo "‚úÖ Test completato!"

# Test della struttura albero
test-structure: $(TARGET)
	@echo "üå≥ TEST STRUTTURA ALBERO"
	@echo "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "="
	@echo "üéØ Albero creato nel programma:"
	@echo "        Luca (root)"
	@echo "       /  |  \\"
	@echo "   Paolo Marco Anna"
	@echo "           |"
	@echo "        Lucia"
	@echo ""
	@echo "üìä Serializzazione DFS (Pre-order):"
	./$(TARGET)
	@echo ""
	@echo "üí° La serializzazione dovrebbe essere: (Luca(Paolo)(Marco(Lucia))(Anna))"

# ============================================================================
# ANALISI E DEBUG
# ============================================================================

# Controllo sintassi
check:
	@echo "üîç Controllo sintassi di tutti i moduli..."
	$(CXX) $(CXXFLAGS) -fsyntax-only main.cc
	$(CXX) $(CXXFLAGS) -fsyntax-only tree.cc
	$(CXX) $(CXXFLAGS) -fsyntax-only tipo.cc
	@echo "‚úÖ Sintassi corretta!"

# Analisi statica
analyze:
	@echo "üî¨ Analisi statica del codice..."
	@echo "üìã Dipendenze:"
	@echo "   main.cc ‚Üí tree.h, tipo.h"
	@echo "   tree.cc ‚Üí tree.h, tipo.h"
	@echo "   tipo.cc ‚Üí tipo.h"
	@echo ""
	@echo "üèóÔ∏è  Struttura dati:"
	@echo "   struct node { tipo_inf, parent*, firstChild*, nextSibling* }"
	@echo "   typedef char* tipo_inf"
	@echo ""
	@echo "‚öôÔ∏è  Algoritmo: Visita DFS con serializzazione ricorsiva"

# Debug con GDB
gdb: $(TARGET_DEBUG)
	@echo "üêõ Avvio debug con GDB..."
	gdb ./$(TARGET_DEBUG)

# Controllo memory leaks
valgrind: $(TARGET_DEBUG)
	@echo "üîç Controllo memory leaks con Valgrind..."
	valgrind $(VALGRIND_FLAGS) ./$(TARGET_DEBUG)

# ============================================================================
# DOCUMENTAZIONE
# ============================================================================

# Informazioni sul progetto
info:
	@echo "üìã INFORMAZIONI PROGETTO"
	@echo "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "="
	@echo "üéØ Progetto: Visita DFS di Alberi (firstChild-nextSibling)"
	@echo "üìÅ Directory: Lez18/visitaDFS_albero"
	@echo "üìÑ File sorgenti: $(SOURCES)"
	@echo "üìÑ File header: $(HEADERS)"
	@echo "üéØ Algoritmo: Depth-First Search ricorsivo"
	@echo "üå≥ Struttura: Albero generale con rappresentazione firstChild-nextSibling"
	@echo ""
	@echo "üîß Funzionalit√† implementate:"
	@echo "   ‚Ä¢ Creazione nodi albero"
	@echo "   ‚Ä¢ Inserimento figli e fratelli"
	@echo "   ‚Ä¢ Visita DFS con serializzazione"
	@echo "   ‚Ä¢ Gestione tipo_inf (stringhe)"
	@echo ""
	@echo "üìä Complessit√†:"
	@echo "   ‚Ä¢ Spazio: O(altezza) per stack ricorsione"
	@echo "   ‚Ä¢ Tempo: O(n) dove n = numero nodi"

# Mostra dipendenze
deps:
	@echo "üîó DIPENDENZE DEI MODULI"
	@echo "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "="
	@echo "main.cc:"
	@echo "  ‚îú‚îÄ‚îÄ tree.h (interfaccia albero)"
	@echo "  ‚îî‚îÄ‚îÄ tipo.h (tipo di dato)"
	@echo ""
	@echo "tree.cc:"
	@echo "  ‚îú‚îÄ‚îÄ tree.h (propria interfaccia)"
	@echo "  ‚îî‚îÄ‚îÄ tipo.h (tipo di dato)"
	@echo ""
	@echo "tipo.cc:"
	@echo "  ‚îî‚îÄ‚îÄ tipo.h (propria interfaccia)"
	@echo ""
	@echo "üì¶ Ordine di compilazione: tipo.o ‚Üí tree.o ‚Üí main.o ‚Üí linking"

# Genera documentazione con Doxygen (se disponibile)
docs:
	@echo "üìö Generazione documentazione..."
	@if command -v doxygen >/dev/null 2>&1; then \
		echo "üîß Doxygen trovato, generazione in corso..."; \
		doxygen -g Doxyfile.tmp 2>/dev/null; \
		echo "PROJECT_NAME = \"VisitaDFS Albero\"" >> Doxyfile.tmp; \
		echo "INPUT = ." >> Doxyfile.tmp; \
		echo "RECURSIVE = YES" >> Doxyfile.tmp; \
		doxygen Doxyfile.tmp 2>/dev/null; \
		rm -f Doxyfile.tmp; \
		echo "‚úÖ Documentazione generata in html/"; \
	else \
		echo "‚ùå Doxygen non trovato. Installa con: brew install doxygen"; \
	fi

# ============================================================================
# GESTIONE PROGETTO
# ============================================================================

# Pulizia file temporanei
clean:
	@echo "üßπ Pulizia file generati..."
	rm -f $(TARGET) $(TARGET_DEBUG)
	rm -rf $(OBJ_DIR)
	rm -f $(OUTPUT_FILE) $(TREE_DIAGRAM)
	@echo "‚úÖ Pulizia completata!"

# Pulizia completa (include documentazione)
clean-all: clean
	@echo "üßπ Pulizia completa..."
	rm -rf html/ latex/ Doxyfile.tmp
	@echo "‚úÖ Pulizia completa terminata!"

# Backup del progetto
backup:
	@echo "üíæ Creazione backup del progetto..."
	@TIMESTAMP=$$(date +%Y%m%d_%H%M%S); \
	tar -czf ../visitaDFS_albero_backup_$$TIMESTAMP.tar.gz .; \
	echo "‚úÖ Backup creato: ../visitaDFS_albero_backup_$$TIMESTAMP.tar.gz"

# Installazione (copia eseguibile in /usr/local/bin)
install: $(TARGET)
	@echo "üì¶ Installazione di $(TARGET)..."
	@if [ -w /usr/local/bin ]; then \
		cp $(TARGET) /usr/local/bin/; \
		echo "‚úÖ $(TARGET) installato in /usr/local/bin/"; \
	else \
		echo "‚ùå Permessi insufficienti. Usa: sudo make install"; \
	fi

# ============================================================================
# COMANDI UTILI SVILUPPO
# ============================================================================

# Formattazione codice (se clang-format √® disponibile)
format:
	@echo "üé® Formattazione codice..."
	@if command -v clang-format >/dev/null 2>&1; then \
		clang-format -i *.cc *.h; \
		echo "‚úÖ Codice formattato!"; \
	else \
		echo "‚ùå clang-format non trovato"; \
	fi

# Conta linee di codice
count:
	@echo "üìä STATISTICHE CODICE"
	@echo "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "="
	@echo "üìÑ File sorgenti:"
	@wc -l $(SOURCES) $(HEADERS) | tail -1
	@echo ""
	@echo "üìã Dettaglio per file:"
	@wc -l $(SOURCES) $(HEADERS)

# Controllo TODO e FIXME
todo:
	@echo "üìù TODO e FIXME nel codice:"
	@grep -n -E "TODO|FIXME|XXX|HACK" $(SOURCES) $(HEADERS) || echo "‚úÖ Nessun TODO trovato!"

# ============================================================================
# AIUTO
# ============================================================================

help:
	@echo "üéØ MAKEFILE - VISITA DFS ALBERO"
	@echo "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "=" "="
	@echo ""
	@echo "üìã TARGET PRINCIPALI:"
	@echo "   make all          - Compila il progetto"
	@echo "   make debug        - Compila versione debug"
	@echo "   make run          - Compila ed esegue"
	@echo "   make run-debug    - Compila ed esegue versione debug"
	@echo "   make test         - Test con output salvato"
	@echo ""
	@echo "üîß SVILUPPO:"
	@echo "   make check        - Controllo sintassi"
	@echo "   make analyze      - Analisi statica codice"
	@echo "   make clean        - Rimuove file generati"
	@echo "   make clean-all    - Pulizia completa"
	@echo ""
	@echo "üêõ DEBUG:"
	@echo "   make gdb          - Debug con GDB"
	@echo "   make valgrind     - Controllo memory leaks"
	@echo ""
	@echo "üìö DOCUMENTAZIONE:"
	@echo "   make info         - Informazioni progetto"
	@echo "   make deps         - Mostra dipendenze"
	@echo "   make docs         - Genera documentazione"
	@echo ""
	@echo "üõ†Ô∏è  UTILIT√Ä:"
	@echo "   make backup       - Backup progetto"
	@echo "   make install      - Installa eseguibile"
	@echo "   make count        - Conta linee codice"
	@echo "   make todo         - Trova TODO nel codice"

# ============================================================================
# TARGET PHONY
# ============================================================================

.PHONY: all debug run run-debug test test-structure check analyze gdb valgrind
.PHONY: info deps docs clean clean-all backup install format count todo help
