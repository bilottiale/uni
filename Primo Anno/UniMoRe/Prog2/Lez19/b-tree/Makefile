# Makefile per B-Tree - Lez19
# Progetto: Implementazione albero binario con gestione memoria
# Autore: Alessandro Bilotti
# Data: 14 agosto 2025

# ============================================================================
# CONFIGURAZIONE COMPILATORE
# ============================================================================

CXX = g++
CXXFLAGS = -Wall -Wextra -std=c++11 -pedantic
DEBUG_FLAGS = -g -DDEBUG -O0
RELEASE_FLAGS = -O2 -DNDEBUG
VALGRIND_FLAGS = --leak-check=full --show-leak-kinds=all --track-origins=yes

# ============================================================================
# FILE E DIRECTORY
# ============================================================================

# File sorgenti
SOURCES = main.cc b-tree.cc tipo.cc
HEADERS = btree.h tipo.h b-tree.h

# File oggetto
OBJECTS = $(SOURCES:.cc=.o)
OBJ_DIR = obj
OBJ_FILES = $(addprefix $(OBJ_DIR)/, $(OBJECTS))

# Eseguibile
TARGET = btree_test
TARGET_DEBUG = $(TARGET)_debug

# ============================================================================
# TARGET PRINCIPALI
# ============================================================================

# Target predefinito
all: $(TARGET)

# Compilazione release
$(TARGET): $(OBJ_FILES)
	@echo "üîó Linking $(TARGET)..."
	$(CXX) $(CXXFLAGS) $(RELEASE_FLAGS) -o $@ $^
	@echo "‚úÖ $(TARGET) compilato con successo!"

# Compilazione debug
debug: $(TARGET_DEBUG)

$(TARGET_DEBUG): CXXFLAGS += $(DEBUG_FLAGS)
$(TARGET_DEBUG): $(OBJ_FILES)
	@echo "üêõ Linking $(TARGET_DEBUG)..."
	$(CXX) $(CXXFLAGS) -o $@ $^
	@echo "‚úÖ $(TARGET_DEBUG) compilato con successo!"

# ============================================================================
# COMPILAZIONE MODULI
# ============================================================================

# Creazione directory oggetti
$(OBJ_DIR):
	@echo "üìÅ Creazione directory $(OBJ_DIR)..."
	@mkdir -p $(OBJ_DIR)

# Compilazione main.cc
$(OBJ_DIR)/main.o: main.cc btree.h tipo.h | $(OBJ_DIR)
	@echo "üî® Compilazione main.cc..."
	$(CXX) $(CXXFLAGS) $(RELEASE_FLAGS) -c $< -o $@

# Compilazione b-tree.cc
$(OBJ_DIR)/b-tree.o: b-tree.cc btree.h tipo.h | $(OBJ_DIR)
	@echo "üî® Compilazione b-tree.cc..."
	$(CXX) $(CXXFLAGS) $(RELEASE_FLAGS) -c $< -o $@

# Compilazione tipo.cc
$(OBJ_DIR)/tipo.o: tipo.cc tipo.h | $(OBJ_DIR)
	@echo "üî® Compilazione tipo.cc..."
	$(CXX) $(CXXFLAGS) $(RELEASE_FLAGS) -c $< -o $@

# ============================================================================
# ESECUZIONE E TEST
# ============================================================================

# Esecuzione normale
run: $(TARGET)
	@echo "üöÄ Esecuzione di $(TARGET)..."
	@echo ""
	./$(TARGET)

# Esecuzione debug
run-debug: $(TARGET_DEBUG)
	@echo "üêõ Esecuzione debug di $(TARGET_DEBUG)..."
	@echo ""
	./$(TARGET_DEBUG)

# Test completo
test: $(TARGET)
	@echo "üß™ TEST COMPLETO ALBERO BINARIO"
	@echo "================================"
	./$(TARGET)
	@echo ""
	@echo "‚úÖ Test completato!"

# Test con valgrind
test-memory: $(TARGET_DEBUG)
	@echo "üîç Test memory leaks con Valgrind..."
	valgrind $(VALGRIND_FLAGS) ./$(TARGET_DEBUG)

# ============================================================================
# ANALISI E DEBUG
# ============================================================================

# Controllo sintassi
check:
	@echo "üîç Controllo sintassi di tutti i moduli..."
	$(CXX) $(CXXFLAGS) -fsyntax-only main.cc
	$(CXX) $(CXXFLAGS) -fsyntax-only b-tree.cc
	$(CXX) $(CXXFLAGS) -fsyntax-only tipo.cc
	@echo "‚úÖ Sintassi corretta!"

# Analisi statica
analyze:
	@echo "üî¨ ANALISI STATICA PROGETTO B-TREE"
	@echo "==================================="
	@echo "üìã Struttura file:"
	@echo "   main.cc    - Programma di test"
	@echo "   b-tree.cc  - Implementazione albero binario"
	@echo "   tipo.cc    - Implementazione tipo dato"
	@echo "   btree.h    - Interfaccia albero"
	@echo "   tipo.h     - Interfaccia tipo"
	@echo ""
	@echo "üèóÔ∏è  Struttura dati:"
	@echo "   struct bnode { tipo_inf, parent*, left*, right* }"
	@echo "   typedef char* tipo_inf"
	@echo "   typedef bnode* btree"
	@echo ""
	@echo "‚öôÔ∏è  Funzionalit√†:"
	@echo "   ‚Ä¢ Creazione e inserimento nodi"
	@echo "   ‚Ä¢ Navigazione (parent, left, right)"
	@echo "   ‚Ä¢ Gestione memoria stringhe"
	@echo "   ‚Ä¢ Confronto e copia tipo dato"

# Debug con GDB
gdb: $(TARGET_DEBUG)
	@echo "üêõ Avvio debug con GDB..."
	gdb ./$(TARGET_DEBUG)

# ============================================================================
# DOCUMENTAZIONE
# ============================================================================

# Informazioni sul progetto
info:
	@echo "üìã INFORMAZIONI PROGETTO B-TREE"
	@echo "================================"
	@echo "üéØ Progetto: Albero Binario con gestione memoria"
	@echo "üìÅ Directory: Lez19/b-tree"
	@echo "üìÑ File sorgenti: $(SOURCES)"
	@echo "üìÑ File header: $(HEADERS)"
	@echo "üå≥ Struttura: Albero binario classico (left-right-parent)"
	@echo "üíæ Tipo dato: Stringhe allocate dinamicamente"
	@echo ""
	@echo "üîß Operazioni implementate:"
	@echo "   ‚Ä¢ new_node(tipo_inf) - Crea nuovo nodo"
	@echo "   ‚Ä¢ insert_left/right() - Inserisce figli"
	@echo "   ‚Ä¢ get_parent/left/right() - Navigazione"
	@echo "   ‚Ä¢ get_info() - Accesso informazioni"
	@echo "   ‚Ä¢ copy/compare/print/destroy() - Gestione tipo"
	@echo ""
	@echo "üéØ Caratteristiche:"
	@echo "   ‚Ä¢ Gestione memoria sicura"
	@echo "   ‚Ä¢ Puntatori bidirezionali"
	@echo "   ‚Ä¢ Interfacce modulari"

# Mostra dipendenze
deps:
	@echo "üîó DIPENDENZE DEI MODULI"
	@echo "========================"
	@echo "main.cc:"
	@echo "  ‚îú‚îÄ‚îÄ btree.h (interfaccia albero)"
	@echo "  ‚îî‚îÄ‚îÄ tipo.h (tipo di dato)"
	@echo ""
	@echo "b-tree.cc:"
	@echo "  ‚îú‚îÄ‚îÄ btree.h (propria interfaccia)"
	@echo "  ‚îî‚îÄ‚îÄ tipo.h (tipo di dato)"
	@echo ""
	@echo "tipo.cc:"
	@echo "  ‚îî‚îÄ‚îÄ tipo.h (propria interfaccia)"
	@echo ""
	@echo "‚ö†Ô∏è  NOTA: Il file include \"btree.h\" ma esiste anche \"b-tree.h\""
	@echo "üì¶ Ordine di compilazione: tipo.o ‚Üí b-tree.o ‚Üí main.o ‚Üí linking"

# ============================================================================
# GESTIONE FILE E PULIZIA
# ============================================================================

# Risoluzione conflitto nomi
fix-headers:
	@echo "üîß Risoluzione conflitto header files..."
	@if [ -f "b-tree.h" ] && [ -f "btree.h" ]; then \
		echo "‚ö†Ô∏è  Trovati sia b-tree.h che btree.h"; \
		echo "üîÑ Rinomino b-tree.h in b-tree.h.backup"; \
		mv b-tree.h b-tree.h.backup; \
		echo "‚úÖ btree.h √® ora l'header principale"; \
	else \
		echo "‚úÖ Nessun conflitto rilevato"; \
	fi

# Lista file generati
list-files:
	@echo "üìÑ FILE DEL PROGETTO"
	@echo "===================="
	@echo "üìã File sorgenti:"
	@ls -la *.cc 2>/dev/null || echo "   Nessun file .cc"
	@echo ""
	@echo "üìã File header:"
	@ls -la *.h 2>/dev/null || echo "   Nessun file .h"
	@echo ""
	@echo "üìã File oggetto:"
	@ls -la $(OBJ_DIR)/*.o 2>/dev/null || echo "   Nessun file oggetto"
	@echo ""
	@echo "üìã Eseguibili:"
	@ls -la $(TARGET) $(TARGET_DEBUG) 2>/dev/null || echo "   Nessun eseguibile"

# Pulizia file temporanei
clean:
	@echo "üßπ Pulizia file generati..."
	rm -f $(TARGET) $(TARGET_DEBUG)
	rm -rf $(OBJ_DIR)
	@echo "‚úÖ Pulizia completata!"

# Pulizia completa
clean-all: clean
	@echo "üßπ Pulizia completa..."
	rm -f *.backup *~
	@echo "‚úÖ Pulizia completa terminata!"

# ============================================================================
# UTILIT√Ä SVILUPPO
# ============================================================================

# Conta linee di codice
count:
	@echo "üìä STATISTICHE CODICE"
	@echo "====================="
	@echo "üìÑ File sorgenti:"
	@wc -l $(SOURCES) $(HEADERS) | tail -1
	@echo ""
	@echo "üìã Dettaglio per file:"
	@wc -l $(SOURCES) $(HEADERS)

# Backup del progetto
backup:
	@echo "üíæ Creazione backup del progetto..."
	@TIMESTAMP=$$(date +%Y%m%d_%H%M%S); \
	tar -czf ../btree_backup_$$TIMESTAMP.tar.gz .; \
	echo "‚úÖ Backup creato: ../btree_backup_$$TIMESTAMP.tar.gz"

# ============================================================================
# AIUTO
# ============================================================================

help:
	@echo "üéØ MAKEFILE - ALBERO BINARIO"
	@echo "============================="
	@echo ""
	@echo "üìã TARGET PRINCIPALI:"
	@echo "   make all          - Compila il progetto"
	@echo "   make debug        - Compila versione debug"
	@echo "   make run          - Compila ed esegue"
	@echo "   make run-debug    - Compila ed esegue versione debug"
	@echo "   make test         - Test completo"
	@echo ""
	@echo "üîß SVILUPPO:"
	@echo "   make check        - Controllo sintassi"
	@echo "   make analyze      - Analisi statica"
	@echo "   make clean        - Rimuove file generati"
	@echo "   make fix-headers  - Risolve conflitti header"
	@echo ""
	@echo "üêõ DEBUG:"
	@echo "   make gdb          - Debug con GDB"
	@echo "   make test-memory  - Test memory leaks"
	@echo ""
	@echo "üìö DOCUMENTAZIONE:"
	@echo "   make info         - Informazioni progetto"
	@echo "   make deps         - Mostra dipendenze"
	@echo "   make list-files   - Lista tutti i file"
	@echo ""
	@echo "üõ†Ô∏è  UTILIT√Ä:"
	@echo "   make backup       - Backup progetto"
	@echo "   make count        - Conta linee codice"

# ============================================================================
# TARGET PHONY
# ============================================================================

.PHONY: all debug run run-debug test test-memory check analyze gdb
.PHONY: info deps fix-headers list-files clean clean-all count backup help
