import java.util.concurrent.*;	
import org.simbrain.network.*;
import org.simbrain.network.networks.*;
import org.simbrain.network.neurons.*;
import org.simbrain.network.interfaces.*;
import org.simbrain.network.builders.*;
import org.simbrain.workspace.*;
import org.simbrain.workspace.updator.*;

/**
 * This is an example of a custom updater which simply adds custom network updating.  
 */
{
    // Build network
    RootNetwork network = new RootNetwork();
    LayeredNetworkBuilder builder = new LayeredNetworkBuilder();
    int[] nodesPerLayer = new int[]{2,4,4,1};
    builder.setNodesPerLayer(nodesPerLayer);
    builder.buildNetwork(network);

    // Add neural network
    NetworkComponent networkComponent = new NetworkComponent("Network", network);
    workspace.addWorkspaceComponent(networkComponent);

    // Set Custom Update Method
    workspace.setUpdateController(new CustomUpdate(network));

    /**
     * Define the custom update method.
     */
    class CustomUpdate implements UpdateController {

        RootNetwork network;

        public CustomUpdate(RootNetwork net) {
            network = net;
        }

        public void doUpdate(UpdateControls controls) {
            
            // A bit of custom update happens here (in this case it's boring, just randomizing weights)
            // More interestingly, activations of the network could, for example, be set from an 
            // external device here, and could be sent to an external device 
            // (So that this network could control a robot, for example).
            network.randomizeWeights();

            // Perform default update
            UpdateController controller = WorkspaceUpdator.DEFAULT_CONTROLLER;
            controller.doUpdate(controls);            
        }

        public String getName() {
            return "Custom update";
        }

    }

}
