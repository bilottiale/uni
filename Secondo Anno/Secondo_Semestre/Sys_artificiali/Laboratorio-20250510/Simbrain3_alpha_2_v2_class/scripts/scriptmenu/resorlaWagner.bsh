import org.simbrain.network.NetworkComponent;
import org.simbrain.network.connections.*;
import org.simbrain.network.interfaces.*;
import org.simbrain.network.desktop.*;
import org.simbrain.network.layouts.*;
import org.simbrain.network.networks.*;
import org.simbrain.network.neurons.*;
import org.simbrain.network.synapses.*;
import org.simbrain.util.*;
import org.simbrain.util.environment.*;
import org.simbrain.workspace.*;
import org.simbrain.workspace.updator.*;
import org.simbrain.world.odorworld.*;
import org.simbrain.world.odorworld.entities.*;
import org.simbrain.world.odorworld.sensors.*;
import javax.swing.*;
import java.swing.*;
import java.util.*;
import java.util.concurrent.*;

//
// Rescorla-Wagner Simulation
//
{

    // Clear workspace
    workspace.clearWorkspace();
    
    // Initial parameter values  
    int numTrials = 5;
    double alpha = .6; // Salience of CS (Candle)
    double beta = .6; // Salience of US (Swiss / Poison)
    double percentBad = 0;
    int xpos = 200;
    int ypos = 160;
    
    // Variables
    double deltaV = 0;
    double unconditioned = 0;
    double conditioned = 0;

    // Load simulation and get references to main objects
    String FS = System.getProperty("file.separator");
    workspace.openWorkspace(new File("scripts" + FS + "scriptmenu" + FS  + "rescorla_wagner.zip"));
    OdorWorldComponent worldComponent = (OdorWorldComponent) workspace.getComponent("fourObjectsLocal.xml");
    OdorWorld world =  worldComponent.getWorld();
    RotatingEntity mouse = (RotatingEntity) world.getEntity("Agent_1");
    SmellSensor sensor = mouse.getSensors().get(0);    
    NetworkComponent networkComponent = (NetworkComponent) workspace.getComponent("vehicle_basic.xml");
    RootNetwork network = networkComponent.getRootNetwork();
    Neuron valueNeuron = network.getNeuron("Neuron_6");
    Neuron rewardNeuron = network.getNeuron("Neuron_8");
    Neuron forwardNeuron = network.getNeuron("Neuron_7");
    Synapse synapseLeftLeft = network.getSynapse("Synapse_20");
    Synapse synapseLeftRight = network.getSynapse("Synapse_19");
    Synapse synapseRightLeft = network.getSynapse("Synapse_22");
    Synapse synapseRightRight = network.getSynapse("Synapse_21");

    // Good and Bad Entitites
    BasicEntity goodEntity  = new BasicEntity("Swiss.gif", world);
    goodEntity.setLocation(xpos+10, ypos+10);
    goodEntity.setSmellSource(new SmellSource(
            new double[] { 0, 10, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            SmellSource.DecayFunction.GAUSSIAN, 200, goodEntity.getLocation()));

    BasicEntity badEntity = new BasicEntity("Poison.gif", world);
    badEntity.setLocation(xpos+10, ypos+10);
    badEntity.setSmellSource(new SmellSource(
            new double[] { 0, 10, -5, 0.0, 0.0, 0.0, 0.0, 0.0},
            SmellSource.DecayFunction.STEP, 400, badEntity.getLocation()));
            // Dispersion above is a cheat so that conditioning happens even though
            //      mouse ends up far away

    // Set up button panel
    JInternalFrame internalFrame = new JInternalFrame("Simulation", true, true);
    LabelledItemPanel panel = new LabelledItemPanel();    
    

    // Parameter Fields
    JTextField trialField = new JTextField();
    trialField.setText("" + numTrials);
    panel.addItem("Trials", trialField);
    JTextField alphaField = new JTextField();
    alphaField.setText("" + alpha);
    panel.addItem("Salience of CS (Alpha)", alphaField);
    JTextField betaField = new JTextField();
    betaField.setText("" + beta);
    panel.addItem("Salience of UCS (Beta)", betaField);
    JTextField percentBadField = new JTextField();
    percentBadField.setText("" + percentBad);
    panel.addItem("Percent Bad", percentBadField);
    JTextField slowDownField = new JTextField();
    slowDownField.setText("" + workspace.getUpdateDelay());
    panel.addItem("Delay per iteration (msec)", slowDownField);
    
    // Run Button
    JButton runButton = new JButton("Run");
        runButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
    
                Executors.newSingleThreadExecutor().execute(new Runnable() {
                    public void run() {
                        
                        workspace.setUpdateDelay(Integer.parseInt(slowDownField.getText()));
                        numTrials = Integer.parseInt(trialField.getText());
                        double alpha = Double.parseDouble(alphaField.getText());
                        double beta = Double.parseDouble(betaField.getText());
                        double percentBad = Double.parseDouble(percentBadField.getText());
                        double heading;
                        double synapseMagnitude = .5;
                        
                        for (int i = 1; i < numTrials+1; i++) {
    
                            // Set up the trial
                            trialField.setText("" + ((numTrials + 1)- i));
                            
                            // Randomize position of mouse on a circle, pointing
                            //      towards main objects
                            heading = 360 * Math.random();
                            mouse.setHeading(heading);
                            heading = Math.toRadians(180 + heading);
                            mouse.setLocation((int)(xpos + (200 * Math.cos(heading))), 
                                    ((int)(ypos + (-200 * Math.sin(heading)))));
                            
                            // Put either a good or bad thing next to the flower
                            world.deleteEntity(goodEntity);
                            world.deleteEntity(badEntity);
                            if (Math.random() > percentBad) {
                                world.addEntity(goodEntity);
                            } else {
                                world.addEntity(badEntity);
                            }
                            
                            // Move mouse up to object by iterating n times
                            for (int j = 0; j < 100; j++) {
                                CountDownLatch latch = new CountDownLatch(1);
                                workspace.iterate(latch);
                                try {
                                    latch.await();
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                            }                                
                            
                            // Set US and CS values
                            conditioned = valueNeuron.getActivation(); 
                            unconditioned = rewardNeuron.getActivation();
    
                            // Compute change in value and update value Neuron
                            deltaV = alpha * beta * (unconditioned - conditioned);
                            valueNeuron.setActivation(valueNeuron.getActivation() + deltaV);
                            
                            // Diagonostics
                            //System.out.println(conditioned + "  " + unconditioned);
                            //System.out.println("-->" + deltaV);
                            
                            // Update value neuron based on deltaV
                            //synapse.setStrength(synapse.getStrength() + deltaV);
                            
                            // Set vehicle to approach or repulse based on current value
                            if (valueNeuron.getActivation() > 0) {
                                synapseLeftLeft.setStrength(synapseMagnitude);
                                synapseLeftRight.setStrength(0);
                                synapseRightLeft.setStrength(0);
                                synapseRightRight.setStrength(synapseMagnitude);
                            } else {
                                synapseLeftLeft.setStrength(0);
                                synapseLeftRight.setStrength(synapseMagnitude);
                                synapseRightLeft.setStrength(synapseMagnitude);
                                synapseRightRight.setStrength(0);
                            }
                            
                            // Speed proportional to current conditioned response
                            forwardNeuron.setActivation(1 + Math.abs(valueNeuron.getActivation()));

                        }
                        trialField.setText("" + numTrials);
                    }
                });
    
            }});
    panel.addItem("Simulation", runButton);

    // Set up Frame
    internalFrame.setLocation(20,38);
    internalFrame.getContentPane().add(panel);
    internalFrame.setVisible(true);
    internalFrame.pack();
    desktop.addInternalFrame(internalFrame);

}
