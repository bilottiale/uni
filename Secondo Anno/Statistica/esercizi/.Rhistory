# Set seed for reproducibility
set.seed(1)
# Number of simulations
n_sim <- 100000
# Define the deck with card values
deck <- c(rep(2:10, each = 4), rep(10, 4 * 3), rep(11, 4))  # Values 2-10, J/Q/K as 10, Ace as 11
# Initialize counters
blackjack_count <- 0
sum_19_count <- 0
# Run the simulations
for (i in 1:n_sim) {
# Draw two cards
hand <- sample(deck, 2, replace = FALSE)
hand_sum <- sum(hand)
# Check for blackjack (Ace + 10)
if ((11 %in% hand) && (10 %in% hand) && length(hand) == 2) {
blackjack_count <- blackjack_count + 1
}
# Check for sum of 19 with Ace as 11
if (hand_sum == 19) {
sum_19_count <- sum_19_count + 1
}
}
# Calculate probabilities
p_blackjack <- blackjack_count / n_sim
p_sum_19 <- sum_19_count / n_sim
# Print the results
cat("Estimated Probability of Blackjack:", p_blackjack, "\n")
cat("Estimated Probability of Sum 19:", p_sum_19, "\n")
# Set seed for reproducibility
set.seed(1)
# Number of simulations
n_sim <- 100000
# Define the deck with card values
deck <- c(rep(2:10, each = 4), rep(10, 4 * 3), rep(11, 4))  # Values 2-10, J/Q/K as 10, Ace as 11
# Initialize counters
blackjack_count <- 0
sum_19_count <- 0
# Run the simulations
for (i in 1:n_sim) {
# Draw two cards
hand <- sample(deck, 2, replace = FALSE)
hand_sum <- sum(hand)
# Check for blackjack (Ace + 10)
if ((11 %in% hand) && (10 %in% hand) && length(hand) == 2) {
blackjack_count <- blackjack_count + 1
}
# Check for sum of 19 with Ace as 11
if (hand_sum == 19) {
sum_19_count <- sum_19_count + 1
}
}
# Calculate probabilities
p_blackjack <- blackjack_count / n_sim
p_sum_19 <- sum_19_count / n_sim
# Print the results
cat("Estimated Probability of Blackjack:", p_blackjack, "\n")
cat("Estimated Probability of Sum 19:", p_sum_19, "\n")
# Set seed for reproducibility
set.seed(1)
# a. 10.000 simulations of the sum of two dice
# Number of simulations
n_sim <- 10000
# Simulations
dice1 <- sample(1:6, n_sim, replace = TRUE)
dice2 <- sample(1:6, n_sim, replace = TRUE)
dice_sum <- dice1 + dice2
# Barplot
barplot(table(dice_sum),
main = "Distribuzione della somma di due dadi",
xlab = "Somma di due dadi",
ylab = "Frequenza")
# b. 10.000 simulations of the sum of two modified dice
# trick_dice1 faces: 5,5,5,5,5,5
# trick_dice2 faces: 2,2,2,6,6,6
trick_dice1 <- sample(c(5, 5, 5, 5, 5, 5), n_sim, replace = TRUE)
trick_dice2 <- sample(c(2, 2, 2, 6, 6, 6), n_sim, replace = TRUE)
trick_dice_sum <- trick_dice1 + trick_dice2
# Barplot
barplot(table(trick_dice_sum),
main = "Distribuzione della somma di due dadi truccati",
xlab = "Somma di due dadi",
ylab = "Frequenza")
# c. 10.000 simulations of the sum of two Sicherman dice
# sicherman_dice1 faces: 1,2,2,3,3,4
# sicherman_dice2 faces: 1,3,4,5,6,8
sicherman_dice1 <- sample(c(1, 2, 2, 3, 3, 4), n_sim, replace = TRUE)
sicherman_dice2 <- sample(c(1, 3, 4, 5, 6, 8), n_sim, replace = TRUE)
sicherman_dice_sum <- sicherman_dice1 + sicherman_dice2
# Barplot
barplot(table(sicherman_dice_sum),
main = "Distribuzione della somma di due dadi Sicherman",
xlab = "Somma di due dadi",
ylab = "Frequenza")
# Barplot
barplot(table(dice_sum),
main = "Distribuzione della somma di due dadi",
xlab = "Somma di due dadi",
ylab = "Frequenza")
# b. 10.000 simulations of the sum of two modified dice
# trick_dice1 faces: 5,5,5,5,5,5
# trick_dice2 faces: 2,2,2,6,6,6
trick_dice1 <- sample(c(5, 5, 5, 5, 5, 5), n_sim, replace = TRUE)
trick_dice2 <- sample(c(2, 2, 2, 6, 6, 6), n_sim, replace = TRUE)
trick_dice_sum <- trick_dice1 + trick_dice2
# Barplot
barplot(table(trick_dice_sum),
main = "Distribuzione della somma di due dadi truccati",
xlab = "Somma di due dadi",
ylab = "Frequenza")
# c. 10.000 simulations of the sum of two Sicherman dice
# sicherman_dice1 faces: 1,2,2,3,3,4
# sicherman_dice2 faces: 1,3,4,5,6,8
sicherman_dice1 <- sample(c(1, 2, 2, 3, 3, 4), n_sim, replace = TRUE)
sicherman_dice2 <- sample(c(1, 3, 4, 5, 6, 8), n_sim, replace = TRUE)
sicherman_dice_sum <- sicherman_dice1 + sicherman_dice2
# Barplot
barplot(table(sicherman_dice_sum),
main = "Distribuzione della somma di due dadi Sicherman",
xlab = "Somma di due dadi",
ylab = "Frequenza")
## Title: M&M's proportions
## Author: Alessandro Bilotti
# Define the probability for each color
proportions <- c(Yellow = 0.14, Red = 0.13, Orange = 0.20, Brown = 0.12, Green = 0.20, Blue = 0.21)
# a. Probability of not green
p_not_green <- 1 - proportions["Green"]
p_not_green
# b. Probability of red, orange, or yellow
p_red_orange_yellow <- proportions["Red"] + proportions["Orange"] + proportions["Yellow"]
p_red_orange_yellow
# c. 4 M&M's contain at least one blue
# Set the seed for reproducibility
set.seed(1)
n_sim <- 10000  # Number of simulations
sample_size <- 4  # Number of M&Ms drawn
# Simulations
contains_blue <- replicate(n_sim, {
sample_colors <- sample(names(proportions), size = sample_size, replace = TRUE, prob = proportions)
"Blue" %in% sample_colors
})
p_contains_blue <- mean(contains_blue)
p_contains_blue
# d. 6 M&M's contain at least 6 colors
sample_size <- 6  # Number of M&Ms drawn
# Simulations
contains_all_colors <- replicate(n_sim, {
sample_colors <- sample(names(proportions), size = sample_size, replace = TRUE, prob = proportions)
length(unique(sample_colors)) == length(proportions) # Check if 6 colors (length(proportions) = 6) are present
})
p_contains_all_colors <- mean(contains_all_colors)
p_contains_all_colors
## Title: M&M's proportions
## Author: Alessandro Bilotti
# Define the probability for each color
proportions <- c(Yellow = 0.14, Red = 0.13, Orange = 0.20, Brown = 0.12, Green = 0.20, Blue = 0.21)
# a. Probability of not green
p_not_green <- 1 - proportions["Green"]
p_not_green
# b. Probability of red, orange, or yellow
p_red_orange_yellow <- proportions["Red"] + proportions["Orange"] + proportions["Yellow"]
p_red_orange_yellow
# c. 4 M&M's contain at least one blue
# Set the seed for reproducibility
set.seed(1)
n_sim <- 10000  # Number of simulations
sample_size <- 4  # Number of M&Ms drawn
# Simulations
contains_blue <- replicate(n_sim, {
sample_colors <- sample(names(proportions), size = sample_size, replace = TRUE, prob = proportions)
"Blue" %in% sample_colors
})
p_contains_blue <- mean(contains_blue)
p_contains_blue
# d. 6 M&M's contain at least 6 colors
sample_size <- 6  # Number of M&Ms drawn
# Simulations
contains_all_colors <- replicate(n_sim, {
sample_colors <- sample(names(proportions), size = sample_size, replace = TRUE, prob = proportions)
length(unique(sample_colors)) == length(proportions) # Check if 6 colors (length(proportions) = 6) are present
})
p_contains_all_colors <- mean(contains_all_colors)
p_contains_all_colors
# graph
barplot(table(sample_colors),
main = "Distribuzione dei colori di 6 M&M's",
xlab = "Colore",
ylab = "Frequenza")
## Title: M&M's proportions
## Author: Alessandro Bilotti
# Define the probability for each color
proportions <- c(Yellow = 0.14, Red = 0.13, Orange = 0.20, Brown = 0.12, Green = 0.20, Blue = 0.21)
# a. Probability of not green
p_not_green <- 1 - proportions["Green"]
p_not_green
# b. Probability of red, orange, or yellow
p_red_orange_yellow <- proportions["Red"] + proportions["Orange"] + proportions["Yellow"]
p_red_orange_yellow
# c. 4 M&M's contain at least one blue
# Set the seed for reproducibility
set.seed(1)
n_sim <- 10000  # Number of simulations
sample_size <- 4  # Number of M&Ms drawn
# Simulations
contains_blue <- replicate(n_sim, {
sample_colors <- sample(names(proportions), size = sample_size, replace = TRUE, prob = proportions)
"Blue" %in% sample_colors
})
p_contains_blue <- mean(contains_blue)
p_contains_blue
# d. 6 M&M's contain at least 6 colors
sample_size <- 6  # Number of M&Ms drawn
# Simulations
contains_all_colors <- replicate(n_sim, {
sample_colors <- sample(names(proportions), size = sample_size, replace = TRUE, prob = proportions)
length(unique(sample_colors)) == length(proportions) # Check if 6 colors (length(proportions) = 6) are present
})
p_contains_all_colors <- mean(contains_all_colors)
p_contains_all_colors
# graph
# graph
barplot(table(sample_colors),
main = "Distribuzione dei colori di 6 M&M's",
xlab = "Colore",
ylab = "Frequenza")
# Define the probability for each color
proportions <- c(Yellow = 0.14, Red = 0.13, Orange = 0.20, Brown = 0.12, Green = 0.20, Blue = 0.21)
# a. Probability of not green
p_not_green <- 1 - proportions["Green"]
p_not_green
# b. Probability of red, orange, or yellow
p_red_orange_yellow <- proportions["Red"] + proportions["Orange"] + proportions["Yellow"]
p_red_orange_yellow
# c. 4 M&M's contain at least one blue
# Set the seed for reproducibility
set.seed(1)
n_sim <- 10000  # Number of simulations
sample_size <- 4  # Number of M&Ms drawn
# Simulations
contains_blue <- replicate(n_sim, {
sample_colors <- sample(names(proportions), size = sample_size, replace = TRUE, prob = proportions)
"Blue" %in% sample_colors
})
p_contains_blue <- mean(contains_blue)
p_contains_blue
# d. 6 M&M's contain at least 6 colors
sample_size <- 6  # Number of M&Ms drawn
# Simulations
contains_all_colors <- replicate(n_sim, {
sample_colors <- sample(names(proportions), size = sample_size, replace = TRUE, prob = proportions)
length(unique(sample_colors)) == length(proportions) # Check if 6 colors (length(proportions) = 6) are present
})
p_contains_all_colors <- mean(contains_all_colors)
p_contains_all_colors
# a. Probability of not green
p_not_green <- 1 - proportions["Green"]
p_not_green
!p_not_green
## Title: M&M's proportions
## Author: Alessandro Bilotti
# Define the probability for each color
proportions <- c(Yellow = 0.14, Red = 0.13, Orange = 0.20, Brown = 0.12, Green = 0.20, Blue = 0.21)
# a. Probability of not green
p_not_green <- 1 - proportions["Green"]
p_not_green
# b. Probability of red, orange, or yellow
p_red_orange_yellow <- proportions["Red"] + proportions["Orange"] + proportions["Yellow"]
p_red_orange_yellow
# c. 4 M&M's contain at least one blue
# Set the seed for reproducibility
set.seed(1)
n_sim <- 10000  # Number of simulations
sample_size <- 4  # Number of M&Ms drawn
# Simulations
contains_blue <- replicate(n_sim, {
sample_colors <- sample(names(proportions), size = sample_size, replace = TRUE, prob = proportions)
"Blue" %in% sample_colors
})
p_contains_blue <- mean(contains_blue)
p_contains_blue
# d. 6 M&M's contain at least 6 colors
sample_size <- 6  # Number of M&Ms drawn
# Simulations
contains_all_colors <- replicate(n_sim, {
sample_colors <- sample(names(proportions), size = sample_size, replace = TRUE, prob = proportions)
length(unique(sample_colors)) == length(proportions) # Check if 6 colors (length(proportions) = 6) are present
})
p_contains_all_colors <- mean(contains_all_colors)
p_contains_all_colors
# Set seed for reproducibility
set.seed(1)
# Number of simulations
n_sim <- 100000
# Define the deck with card values
deck <- c(rep(2:10, each = 4), rep(10, 4 * 3), rep(11, 4))  # Values 2-10, J/Q/K as 10, Ace as 11
# Initialize counters
blackjack_count <- 0
sum_19_count <- 0
# Run the simulations
for (i in 1:n_sim) {
# Draw two cards
hand <- sample(deck, 2, replace = FALSE)
hand_sum <- sum(hand)
# Check for blackjack (Ace + 10)
if ((11 %in% hand) && (10 %in% hand) && length(hand) == 2) {
blackjack_count <- blackjack_count + 1
}
# Check for sum of 19 with Ace as 11
if (hand_sum == 19) {
sum_19_count <- sum_19_count + 1
}
}
# Calculate probabilities
p_blackjack <- blackjack_count / n_sim
p_sum_19 <- sum_19_count / n_sim
# Print the results
cat("Estimated Probability of Blackjack:", p_blackjack, "\n")
cat("Estimated Probability of Sum 19:", p_sum_19, "\n")
# install.packages("ggplot2") # Uncomment to install the ggplot2 package
# Load necessary libraries
library(ggplot2)
# Load the "quakes" dataset (built into R)
data(quakes)
# Analyze the structure of the dataset
str(quakes)
head(quakes)
# Magnitude
head(quakes$mag)
min(quakes$mag)
max(quakes$mag)
# Depth
head(quakes$depth)
min(quakes$depth)
max(quakes$depth)
# Latitude
head(quakes$lat)
# Longitude
head(quakes$long)
# Plot
ggplot(quakes, aes(x = long, y = lat, color = depth, size = mag)) +
geom_point() +  # geom_point() -> Scatter plot
scale_color_gradient(low = "blue", high = "red") +
scale_size_continuous(range = c(1, 5)) +
labs(x = "Longitudine", y = "Latitudine",
title = "Posizione terremoti Isole Fiji (anni 60)",
color = "Profondità(Km)",
size = "Magnitudo") +
theme_minimal() # Remove bg
# install.packages("ggplot2") # Uncomment to install the ggplot2 package
# Load necessary libraries
library(ggplot2)
# Load the "quakes" dataset (built into R)
data(quakes)
# Analyze the structure of the dataset
str(quakes)
head(quakes)
# Magnitude
head(quakes$mag)
min(quakes$mag)
max(quakes$mag)
# Depth
head(quakes$depth)
min(quakes$depth)
max(quakes$depth)
# Latitude
head(quakes$lat)
# Longitude
head(quakes$long)
# Plot
ggplot(quakes, aes(x = long, y = lat, color = depth, size = mag)) +
geom_point() +  # geom_point() -> Scatter plot
scale_color_gradient(low = "blue", high = "red") +
scale_size_continuous(range = c(1, 5)) +
labs(x = "Longitudine", y = "Latitudine",
title = "Posizione terremoti Isole Fiji (anni 60)",
color = "Profondità(Km)",
size = "Magnitudo") +
theme_minimal() # Remove bg
max(quakes$mag)
# Load necessary libraries
library(ggplot2)
# Load the "quakes" dataset (built into R)
data(quakes)
# Analyze the structure of the dataset
str(quakes)
head(quakes)
# Magnitude
head(quakes$mag)
min(quakes$mag)
max(quakes$mag)
# Depth
head(quakes$depth)
min(quakes$depth)
max(quakes$depth)
# Latitude
head(quakes$lat)
# Longitude
head(quakes$long)
# Plot
ggplot(quakes, aes(x = long, y = lat, color = depth, size = mag)) +
geom_point() +  # geom_point() -> Scatter plot
scale_color_gradient(low = "blue", high = "red") +
scale_size_continuous(range = c(1, 5)) +
labs(x = "Longitudine", y = "Latitudine",
title = "Posizione terremoti Isole Fiji (anni 60)",
color = "Profondità(Km)",
size = "Magnitudo") +
theme_minimal() # Remove bg
