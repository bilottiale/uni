na_count <- sum(is.na(df$LapTime))
if (na_count > 0) {
cat(paste(na_count, "righe hanno valori NA in LapTime dopo la conversione.\n"))
} else {
cat("Nessun valore NA in LapTime dopo la conversione.\n")
}
# Filtra i dati per il pilota "VER" e il circuito "Bahrain Grand Prix"
df_ver_bahrain <- df %>%
filter(Driver == "VER" & Circuit == "Bahrain Grand Prix")
# Unisce i dati meteo con i dati del pilota in base alla colonna "Circuit"
df_ver_bahrain <- df_ver_bahrain %>%
left_join(df_meteo, by = c("Circuit" = "EventName"))
# Carica i pacchetti necessari
library(dplyr)
library(ggplot2)
library(corrplot)
# Carica i dati
df <- read.csv("giri_piloti.csv")
df_meteo <- read.csv("Meteo_last.csv")
# Converte LapTime da formato "MM:SS.sss" a secondi
convert_to_seconds <- function(x) {
time_parts <- strsplit(x, ":")[[1]]
minutes <- as.numeric(time_parts[1])
seconds <- as.numeric(time_parts[2])
milliseconds <- as.numeric(substr(time_parts[3], 1, 3)) / 1000
return(minutes * 60 + seconds + milliseconds)
}
df$LapTime <- sapply(df$LapTime, convert_to_seconds)
# Filtra i dati per il pilota "VER" e il circuito "Bahrain Grand Prix"
df_ver_bahrain <- df %>%
filter(Driver == "VER" & Circuit == "Bahrain Grand Prix")
# Controlla e rimuovi eventuali duplicati nel dataframe meteo
duplicati_meteo <- df_meteo %>%
group_by(EventName) %>%
filter(n() > 1)
# Visualizza i duplicati
print(duplicati_meteo)
# Rimuovi i duplicati da df_meteo
df_meteo_senza_duplicati <- df_meteo %>%
distinct(EventName, .keep_all = TRUE)
# Unisce i dati meteo con i dati del pilota in base alla colonna "Circuit"
df_ver_bahrain <- df_ver_bahrain %>%
left_join(df_meteo_senza_duplicati, by = c("Circuit" = "EventName"))
# Visualizza le prime righe per verificare l'unione
head(df_ver_bahrain)
# Confronto tra Giri con e Senza Pioggia per "VER" nel Bahrain
ggplot(df_ver_bahrain, aes(x = as.factor(Rainfall), y = LapTime, fill = as.factor(Rainfall))) +
geom_boxplot() +
scale_fill_manual(values = c("lightblue", "lightgreen")) +  # Aggiungi la mappatura manuale dei colori
labs(title = "Confronto dei Tempi sul Giro con e senza Pioggia per VER nel Bahrain",
x = "Pioggia", y = "Tempo sul Giro (secondi)")
# Correlazione tra TrackTemp, Humidity e LapTime per "VER" nel Bahrain
corr_matrix_ver_bahrain <- cor(df_ver_bahrain[, c("TrackTemp", "Humidity", "LapTime")])
# Heatmap delle correlazioni
corrplot(corr_matrix_ver_bahrain, method = "circle", type = "upper",
tl.col = "black", tl.cex = 0.8)
# Analisi della Probabilità di un Evento per "VER" nel Bahrain
# Probabilità che un giro con mescola "SOFT" abbia un tempo inferiore alla mediana dei tempi sul giro
mediana_laptime_bahrain <- median(df_ver_bahrain$LapTime)
prob_sof_laptime_bahrain <- df_ver_bahrain %>%
filter(Compound == "SOFT", LapTime < mediana_laptime_bahrain) %>%
nrow() / nrow(df_ver_bahrain %>% filter(Compound == "SOFT"))
cat("Probabilità che un giro con mescola 'SOFT' abbia un tempo inferiore alla mediana:", prob_sof_laptime_bahrain, "\n")
# Modello di Regressione Lineare per Predire il Tempo sul Giro nel Bahrain
model_bahrain <- lm(LapTime ~ TrackTemp + TyreLife + Compound, data = df_ver_bahrain)
# Riepilogo del modello
summary(model_bahrain)
# Visualizza la previsione del modello
df_ver_bahrain$predicted_laptime <- predict(model_bahrain, df_ver_bahrain)
# Grafico di dispersione con la linea di regressione
ggplot(df_ver_bahrain, aes(x = TrackTemp, y = LapTime)) +
geom_point(aes(color = Compound)) +
geom_smooth(method = "lm", se = FALSE, col = "red") +
labs(title = "Regressione Lineare tra TrackTemp e LapTime per VER nel Bahrain",
x = "Temperatura della Pista (°C)", y = "Tempo sul Giro (secondi)")
# Grafico a dispersione tra TrackTemp e LapTime nel Bahrain
ggplot(df_ver_bahrain, aes(x = TrackTemp, y = LapTime)) +
geom_point(aes(color = TyreLife), size = 3) +  # Colora i punti in base alla vita del pneumatico (TyreLife)
labs(title = "Grafico a Dispersione 2D: TrackTemp vs LapTime per VER nel Bahrain",
x = "TrackTemp (°C)", y = "LapTime (secondi)") +
theme_minimal() +
scale_color_gradient(low = "blue", high = "red")  # Colore dei punti in base alla durata del pneumatico
# Converte LapTime da formato "MM:SS.sss" a secondi
convert_to_seconds <- function(x) {
time_parts <- strsplit(x, ":")[[1]]
minutes <- as.numeric(time_parts[1])
seconds <- as.numeric(time_parts[2])
milliseconds <- as.numeric(substr(time_parts[3], 1, 3)) / 1000
return(minutes * 60 + seconds + milliseconds)
}
df$LapTime <- sapply(df$LapTime, convert_to_seconds)
# Carica i pacchetti necessari
library(dplyr)
library(ggplot2)
# Carica i dati
df <- read.csv("giri_piloti.csv")
df_meteo <- read.csv("Meteo_last.csv")
# Converte LapTime da formato "HH:MM:SS.sss" a secondi
convert_to_seconds <- function(x) {
time_parts <- strsplit(x, ":")[[1]]
hours <- as.numeric(time_parts[1])
minutes <- as.numeric(time_parts[2])
seconds <- as.numeric(time_parts[3])
return(hours * 3600 + minutes * 60 + seconds)
}
df$LapTime <- sapply(df$LapTime, convert_to_seconds)
# Filtra i dati per il pilota "VER"
df_ver <- df %>% filter(Driver == "VER")
# Unisce i dati meteo con i dati del pilota in base alla colonna "Circuit"
df_ver <- df_ver %>%
left_join(df_meteo, by = c("Circuit" = "EventName"))
# Visualizza le prime righe per verificare l'unione
head(df_ver)
# 2. Confronto tra Giri con e Senza Pioggia per "VER"
ggplot(df_ver, aes(x = as.factor(Rainfall), y = LapTime)) +
geom_boxplot(fill = c("lightblue", "lightgreen")) +
labs(title = "Confronto dei Tempi sul Giro con e senza Pioggia per VER", x = "Pioggia", y = "Tempo sul Giro (secondi)")
# 3. Correlazione tra TrackTemp, Humidity e LapTime per "VER"
corr_matrix_ver <- cor(df_ver[, c("TrackTemp", "Humidity", "LapTime")])
# Heatmap delle correlazioni
corrplot(corr_matrix_ver, method = "circle", type = "upper", tl.col = "black", tl.cex = 0.8)
# 4. Analisi della Probabilità di un Evento per "VER"
## - Probabilità che un giro con mescola "SOFT" abbia un tempo inferiore alla mediana dei tempi sul giro
mediana_laptime <- median(df_ver$LapTime)
prob_sof_laptime <- df_ver %>%
filter(Compound == "SOFT", LapTime < mediana_laptime) %>%
nrow() / nrow(df_ver %>% filter(Compound == "SOFT"))
cat("Probabilità che un giro con mescola 'SOFT' abbia un tempo inferiore alla mediana:", prob_sof_laptime, "\n")
# 5. Modello di Regressione Lineare per Predire il Tempo sul Giro
model <- lm(LapTime ~ TrackTemp + TyreLife + Compound, data = df_ver)
# Riepilogo del modello
summary(model)
# Visualizza la previsione del modello
df_ver$predicted_laptime <- predict(model, df_ver)
# Grafico di dispersione con la linea di regressione
ggplot(df_ver, aes(x = TrackTemp, y = LapTime)) +
geom_point(aes(color = Compound)) +
geom_smooth(method = "lm", se = FALSE, col = "red") +
labs(title = "Regressione Lineare tra TrackTemp e LapTime per VER", x = "Temperatura della Pista (°C)", y = "Tempo sul Giro (secondi)")
# 6. Grafico a dispersione 3D tra TrackTemp, TyreLife e LapTime
scatterplot3d(df_ver$TrackTemp, df_ver$TyreLife, df_ver$LapTime,
pch = 16,                            # Usa cerchi pieni per i punti
color = rainbow(length(df_ver$LapTime)), # Colore variabile per i punti
xlab = "TrackTemp",                  # Etichetta asse X
ylab = "TyreLife",                   # Etichetta asse Y
zlab = "LapTime",                    # Etichetta asse Z
main = "Grafico a Dispersione 3D: TrackTemp, TyreLife e LapTime per VER",
cex.lab = 1.2,                       # Aumenta la dimensione delle etichette degli assi
cex.main = 1.5,                      # Aumenta la dimensione del titolo
cex.axis = 1.2,                      # Aumenta la dimensione dei numeri sugli assi
cex = 1.5)                           # Aumenta la dimensione dei punti
# Carica i pacchetti necessari
library(dplyr)
library(ggplot2)
# Carica i dati
df <- read.csv("giri_piloti.csv")
df_meteo <- read.csv("Meteo_last.csv")
# Converte LapTime da formato "HH:MM:SS.sss" a secondi
convert_to_seconds <- function(x) {
time_parts <- strsplit(x, ":")[[1]]
hours <- as.numeric(time_parts[1])
minutes <- as.numeric(time_parts[2])
seconds <- as.numeric(time_parts[3])
return(hours * 3600 + minutes * 60 + seconds)
}
df$LapTime <- sapply(df$LapTime, convert_to_seconds)
# Filtra i dati per il pilota "VER"
df_ver <- df %>% filter(Driver == "VER")
# Unisce i dati meteo con i dati del pilota in base alla colonna "Circuit"
df_ver <- df_ver %>%
left_join(df_meteo, by = c("Circuit" = "EventName"))
# Visualizza le prime righe per verificare l'unione
head(df_ver)
# 2. Confronto tra Giri con e Senza Pioggia per "VER"
ggplot(df_ver, aes(x = as.factor(Rainfall), y = LapTime)) +
geom_boxplot(fill = c("lightblue", "lightgreen")) +
labs(title = "Confronto dei Tempi sul Giro con e senza Pioggia per VER", x = "Pioggia", y = "Tempo sul Giro (secondi)")
# 3. Correlazione tra TrackTemp, Humidity e LapTime per "VER"
corr_matrix_ver <- cor(df_ver[, c("TrackTemp", "Humidity", "LapTime")])
# Heatmap delle correlazioni
corrplot(corr_matrix_ver, method = "circle", type = "upper", tl.col = "black", tl.cex = 0.8)
# 4. Analisi della Probabilità di un Evento per "VER"
## - Probabilità che un giro con mescola "SOFT" abbia un tempo inferiore alla mediana dei tempi sul giro
mediana_laptime <- median(df_ver$LapTime)
prob_sof_laptime <- df_ver %>%
filter(Compound == "SOFT", LapTime < mediana_laptime) %>%
nrow() / nrow(df_ver %>% filter(Compound == "SOFT"))
cat("Probabilità che un giro con mescola 'SOFT' abbia un tempo inferiore alla mediana:", prob_sof_laptime, "\n")
# 5. Modello di Regressione Lineare per Predire il Tempo sul Giro
model <- lm(LapTime ~ TrackTemp + TyreLife + Compound, data = df_ver)
# Riepilogo del modello
summary(model)
# Visualizza la previsione del modello
df_ver$predicted_laptime <- predict(model, df_ver)
# Grafico di dispersione con la linea di regressione
ggplot(df_ver, aes(x = TrackTemp, y = LapTime)) +
geom_point(aes(color = Compound)) +
geom_smooth(method = "lm", se = FALSE, col = "red") +
labs(title = "Regressione Lineare tra TrackTemp e LapTime per VER", x = "Temperatura della Pista (°C)", y = "Tempo sul Giro (secondi)")
# 6. Grafico a dispersione 3D tra TrackTemp, TyreLife e LapTime
scatterplot3d(df_ver$TrackTemp, df_ver$TyreLife, df_ver$LapTime,
pch = 16,                            # Usa cerchi pieni per i punti
color = rainbow(length(df_ver$LapTime)), # Colore variabile per i punti
xlab = "TrackTemp",                  # Etichetta asse X
ylab = "TyreLife",                   # Etichetta asse Y
zlab = "LapTime",                    # Etichetta asse Z
main = "Grafico a Dispersione 3D: TrackTemp, TyreLife e LapTime per VER",
cex.lab = 1.2,                       # Aumenta la dimensione delle etichette degli assi
cex.main = 1.5,                      # Aumenta la dimensione del titolo
cex.axis = 1.2,                      # Aumenta la dimensione dei numeri sugli assi
cex = 1.5)                           # Aumenta la dimensione dei punti
# 2. Confronto tra Giri con e Senza Pioggia per "VER"
ggplot(df_ver, aes(x = as.factor(Rainfall), y = LapTime)) +
geom_boxplot(fill = c("lightblue", "lightgreen")) +
labs(title = "Confronto dei Tempi sul Giro con e senza Pioggia per VER", x = "Pioggia", y = "Tempo sul Giro (secondi)")
# 3. Correlazione tra TrackTemp, Humidity e LapTime per "VER"
corr_matrix_ver <- cor(df_ver[, c("TrackTemp", "Humidity", "LapTime")])
# Carica i pacchetti necessari
library(dplyr)
library(ggplot2)
# Carica i dati
df <- read.csv("giri_piloti.csv")
df_meteo <- read.csv("Meteo_last.csv")
# Converte LapTime da formato "HH:MM:SS.sss" a secondi
convert_to_seconds <- function(x) {
time_parts <- strsplit(x, ":")[[1]]
hours <- as.numeric(time_parts[1])
minutes <- as.numeric(time_parts[2])
seconds <- as.numeric(time_parts[3])
return(hours * 3600 + minutes * 60 + seconds)
}
df$LapTime <- sapply(df$LapTime, convert_to_seconds)
# Filtra i dati per il pilota "VER"
df_ver <- df %>% filter(Driver == "VER")
# Unisce i dati meteo con i dati del pilota in base alla colonna "Circuit"
df_ver <- df_ver %>%
left_join(df_meteo, by = c("Circuit" = "EventName"))
# Visualizza le prime righe per verificare l'unione
head(df_ver)
# 2. Confronto tra Giri con e Senza Pioggia per "VER"
ggplot(df_ver, aes(x = as.factor(Rainfall), y = LapTime)) +
geom_boxplot(fill = c("lightblue", "lightgreen")) +
labs(title = "Confronto dei Tempi sul Giro con e senza Pioggia per VER", x = "Pioggia", y = "Tempo sul Giro (secondi)")
# 3. Correlazione tra TrackTemp, Humidity e LapTime per "VER"
corr_matrix_ver <- cor(df_ver[, c("TrackTemp", "Humidity", "LapTime")])
# Heatmap delle correlazioni
corrplot(corr_matrix_ver, method = "circle", type = "upper", tl.col = "black", tl.cex = 0.8)
# 4. Analisi della Probabilità di un Evento per "VER"
## - Probabilità che un giro con mescola "SOFT" abbia un tempo inferiore alla mediana dei tempi sul giro
mediana_laptime <- median(df_ver$LapTime)
prob_sof_laptime <- df_ver %>%
filter(Compound == "SOFT", LapTime < mediana_laptime) %>%
nrow() / nrow(df_ver %>% filter(Compound == "SOFT"))
cat("Probabilità che un giro con mescola 'SOFT' abbia un tempo inferiore alla mediana:", prob_sof_laptime, "\n")
# 5. Modello di Regressione Lineare per Predire il Tempo sul Giro
model <- lm(LapTime ~ TrackTemp + TyreLife + Compound, data = df_ver)
# Riepilogo del modello
summary(model)
# Visualizza la previsione del modello
df_ver$predicted_laptime <- predict(model, df_ver)
# Grafico di dispersione con la linea di regressione
ggplot(df_ver, aes(x = TrackTemp, y = LapTime)) +
geom_point(aes(color = Compound)) +
geom_smooth(method = "lm", se = FALSE, col = "red") +
labs(title = "Regressione Lineare tra TrackTemp e LapTime per VER", x = "Temperatura della Pista (°C)", y = "Tempo sul Giro (secondi)")
# 6. Grafico a dispersione 3D tra TrackTemp, TyreLife e LapTime
scatterplot3d(df_ver$TrackTemp, df_ver$TyreLife, df_ver$LapTime,
pch = 16,                            # Usa cerchi pieni per i punti
color = rainbow(length(df_ver$LapTime)), # Colore variabile per i punti
xlab = "TrackTemp",                  # Etichetta asse X
ylab = "TyreLife",                   # Etichetta asse Y
zlab = "LapTime",                    # Etichetta asse Z
main = "Grafico a Dispersione 3D: TrackTemp, TyreLife e LapTime per VER",
cex.lab = 1.2,                       # Aumenta la dimensione delle etichette degli assi
cex.main = 1.5,                      # Aumenta la dimensione del titolo
cex.axis = 1.2,                      # Aumenta la dimensione dei numeri sugli assi
cex = 1.5)                           # Aumenta la dimensione dei punti
df$LapTime <- sapply(df$LapTime, convert_to_seconds)
# Filtra i dati per il pilota "VER"
df_ver <- df %>% filter(Driver == "VER")
# Unisce i dati meteo con i dati del pilota in base alla colonna "Circuit"
df_ver <- df_ver %>%
left_join(df_meteo, by = c("Circuit" = "EventName"))
# Visualizza le prime righe per verificare l'unione
head(df_ver)
# Visualizza le prime righe per verificare l'unione
print(df_ver)
library(dplyr)
# Carica i dati
df <- read.csv("giri_piloti.csv")
df_meteo <- read.csv("Meteo_last.csv")
# Converte le colonne Time in formato POSIXct
df$Time <- as.POSIXct(df$Time, format="%H:%M:%S.%3N", tz="UTC")
df_meteo$Time <- as.POSIXct(df_meteo$Time, format="%H:%M:%S.%3N", tz="UTC")
# Filtra i dati per il pilota "VER" e il circuito "Bahrain Grand Prix"
df_ver_bahrain <- df %>%
filter(Driver == "VER" & Circuit == "Bahrain Grand Prix")
# Funzione per trovare il tempo meteo più vicino a ogni giro del pilota
find_closest_meteo <- function(time, meteo_data) {
time_diff <- abs(difftime(meteo_data$Time, time, units = "secs"))
closest_idx <- which.min(time_diff)
return(meteo_data[closest_idx, ])
}
# Applica la funzione a ciascun giro
df_ver_bahrain_meteo <- df_ver_bahrain %>%
rowwise() %>%
mutate(closest_meteo = list(find_closest_meteo(Time, df_meteo))) %>%
unnest(cols = c(closest_meteo))
library(dplyr)
# Carica i dati
df <- read.csv("giri_piloti.csv")
df_meteo <- read.csv("Meteo_last.csv")
# Converte le colonne Time in formato POSIXct
df$Time <- as.POSIXct(df$Time, format="%H:%M:%S.%3N", tz="UTC")
df_meteo$Time <- as.POSIXct(df_meteo$Time, format="%H:%M:%S.%3N", tz="UTC")
# Filtra i dati per il pilota "VER" e il circuito "Bahrain Grand Prix"
df_ver_bahrain <- df %>%
filter(Driver == "VER" & Circuit == "Bahrain Grand Prix")
# Funzione per trovare il tempo meteo più vicino a ogni giro del pilota
find_closest_meteo <- function(time, meteo_data) {
time_diff <- abs(difftime(meteo_data$Time, time, units = "secs"))
closest_idx <- which.min(time_diff)
return(meteo_data[closest_idx, ])
}
# Assicurati di avere anche il pacchetto tidyr caricato
df_ver_bahrain_meteo <- df_ver_bahrain %>%
rowwise() %>%
mutate(closest_meteo = list(find_closest_meteo(Time, df_meteo))) %>%
unnest(cols = c(closest_meteo))
library(dplyr)
# Carica i dati
df <- read.csv("giri_piloti.csv")
df_meteo <- read.csv("Meteo_last.csv")
# Converte le colonne Time in formato POSIXct
df$Time <- as.POSIXct(df$Time, format="%H:%M:%S.%3N", tz="UTC")
df_meteo$Time <- as.POSIXct(df_meteo$Time, format="%H:%M:%S.%3N", tz="UTC")
# Filtra i dati per il pilota "VER" e il circuito "Bahrain Grand Prix"
df_ver_bahrain <- df %>%
filter(Driver == "VER" & Circuit == "Bahrain Grand Prix")
# Funzione per trovare il tempo meteo più vicino a ogni giro del pilota
find_closest_meteo <- function(time, meteo_data) {
time_diff <- abs(difftime(meteo_data$Time, time, units = "secs"))
closest_idx <- which.min(time_diff)
return(meteo_data[closest_idx, ])
}
df_ver_bahrain_meteo <- df_ver_bahrain %>%
rowwise() %>%
mutate(closest_meteo = list(find_closest_meteo(Time, df_meteo))) %>%
unnest(closest_meteo)
# Carica i pacchetti necessari
library(dplyr)
library(lubridate)
# Carica i dati
df <- read.csv("giri_piloti.csv")
df_meteo <- read.csv("Meteo_last.csv")
# Converte il formato tempo (Time) in oggetti POSIXct per entrambi i dataset
df$Time <- as.POSIXct(df$Time, format="%H:%M:%OS", tz="UTC")
df_meteo$Time <- as.POSIXct(df_meteo$Time, format="%M:%OS", tz="UTC")
# Trova il meteo più vicino per ogni giro
find_closest_meteo <- function(lap_time, meteo_data) {
time_diff <- abs(difftime(meteo_data$Time, lap_time, units="secs"))
closest_row <- meteo_data[which.min(time_diff), ]
return(closest_row)
}
# Aggiungi i dati meteorologici ai giri del pilota "VER"
df_ver_bahrain <- df %>%
filter(Driver == "VER" & Circuit == "Bahrain Grand Prix") %>%
rowwise() %>%
mutate(closest_meteo = list(find_closest_meteo(Time, df_meteo))) %>%
unnest(closest_meteo)
# Converte il formato tempo (Time) in oggetti POSIXct per entrambi i dataset
df$Time <- as.POSIXct(df$Time, format="%H:%M:%OS", tz="UTC")
df_meteo$Time <- as.POSIXct(df_meteo$Time, format="%M:%OS", tz="UTC")
# Trova il meteo più vicino per ogni giro
find_closest_meteo <- function(lap_time, meteo_data) {
time_diff <- abs(difftime(meteo_data$Time, lap_time, units="secs"))
closest_row <- meteo_data[which.min(time_diff), ]
return(closest_row)
}
print(df$Time)
# Carica i pacchetti necessari
library(dplyr)
library(lubridate)
# Carica i dati
df <- read.csv("giri_piloti.csv")
df_meteo <- read.csv("Meteo_last.csv")
# Converte il formato tempo (Time) in oggetti POSIXct per entrambi i dataset
df$Time <- as.POSIXct(df$Time, format="%H:%M:%OS", tz="UTC")
df_meteo$Time <- as.POSIXct(df_meteo$Time, format="%M:%OS", tz="UTC")
# Trova il meteo più vicino per ogni giro
find_closest_meteo <- function(lap_time, meteo_data) {
time_diff <- abs(difftime(meteo_data$Time, lap_time, units="secs"))
closest_row <- meteo_data[which.min(time_diff), ]
return(closest_row)
}
# Aggiungi i dati meteorologici ai giri del pilota "VER"
df_ver_bahrain <- df %>%
filter(Driver == "VER" & Circuit == "Bahrain Grand Prix") %>%
rowwise() %>%
mutate(closest_meteo = list(find_closest_meteo(Time, df_meteo))) %>%
unnest(closest_meteo)
# Carica i pacchetti necessari
library(dplyr)
# Carica i dati
df <- read.csv("giri_piloti.csv")
df_meteo <- read.csv("Meteo_last.csv")
# Converte il formato tempo (Time) in oggetti POSIXct per entrambi i dataset
df$Time <- as.POSIXct(df$Time, format="%H:%M:%OS", tz="UTC")
df_meteo$Time <- as.POSIXct(df_meteo$Time, format="%M:%OS", tz="UTC")
# Trova il meteo più vicino per ogni giro
find_closest_meteo <- function(lap_time, meteo_data) {
time_diff <- abs(difftime(meteo_data$Time, lap_time, units="secs"))
closest_row <- meteo_data[which.min(time_diff), ]
return(closest_row)
}
# Aggiungi i dati meteorologici ai giri del pilota "VER"
df_ver_bahrain <- df %>%
filter(Driver == "VER" & Circuit == "Bahrain Grand Prix") %>%
rowwise() %>%
mutate(closest_meteo = list(find_closest_meteo(Time, df_meteo))) %>%
unnest(closest_meteo)
# Carica i pacchetti necessari
library(dplyr)
library(lubridate)
library(tidyr)  # Per unnest()
# Carica i dati
df <- read.csv("giri_piloti.csv")
df_meteo <- read.csv("Meteo_last.csv")
# Converte il formato tempo (Time) in oggetti POSIXct per entrambi i dataset
df$Time <- as.POSIXct(df$Time, format="%H:%M:%OS", tz="UTC")
df_meteo$Time <- as.POSIXct(df_meteo$Time, format="%M:%OS", tz="UTC")
# Trova il meteo più vicino per ogni giro
find_closest_meteo <- function(lap_time, meteo_data) {
time_diff <- abs(difftime(meteo_data$Time, lap_time, units="secs"))
closest_row <- meteo_data[which.min(time_diff), ]
return(closest_row)
}
# Aggiungi i dati meteorologici ai giri del pilota "VER"
df_ver_bahrain <- df %>%
filter(Driver == "VER" & Circuit == "Bahrain Grand Prix") %>%
rowwise() %>%
mutate(closest_meteo = list(find_closest_meteo(Time, df_meteo)))
# Estrai le colonne dal risultato della lista e uniscile ai dati
df_ver_bahrain <- df_ver_bahrain %>%
mutate(TrackTemp = sapply(closest_meteo, function(x) x$TrackTemp),
Rainfall = sapply(closest_meteo, function(x) x$Rainfall),
Humidity = sapply(closest_meteo, function(x) x$Humidity)) %>%
select(-closest_meteo)  # Rimuove la colonna "closest_meteo"
# Carica i pacchetti necessari
library(dplyr)
library(lubridate)
# Carica i dati
df <- read.csv("giri_piloti.csv")
df_meteo <- read.csv("Meteo_last.csv")
# Converte il formato tempo (Time) in oggetti POSIXct per entrambi i dataset
df$Time <- as.POSIXct(df$Time, format="%H:%M:%OS", tz="UTC")
df_meteo$Time <- as.POSIXct(df_meteo$Time, format="%M:%OS", tz="UTC")
# Trova il meteo più vicino per ogni giro
find_closest_meteo <- function(lap_time, meteo_data) {
time_diff <- abs(difftime(meteo_data$Time, lap_time, units="secs"))
closest_row <- meteo_data[which.min(time_diff), ]
return(closest_row)
}
# Aggiungi i dati meteorologici ai giri del pilota "VER"
df_ver_bahrain <- df %>%
filter(Driver == "VER" & Circuit == "Bahrain Grand Prix") %>%
rowwise() %>%
mutate(closest_meteo = list(find_closest_meteo(Time, df_meteo)))
# Estrai le colonne dal risultato della lista e uniscile ai dati
df_ver_bahrain <- df_ver_bahrain %>%
mutate(TrackTemp = unlist(lapply(closest_meteo, function(x) x$TrackTemp)),
Rainfall = unlist(lapply(closest_meteo, function(x) x$Rainfall)),
Humidity = unlist(lapply(closest_meteo, function(x) x$Humidity))) %>%
select(-closest_meteo)  # Rimuove la colonna "closest_meteo"
# Carica i pacchetti necessari
library(dplyr)
library(lubridate)
# Carica i dati
df <- read.csv("giri_piloti.csv")
df_meteo <- read.csv("Meteo_last.csv")
# Converte il formato tempo (Time) in oggetti POSIXct per entrambi i dataset
df$Time <- as.POSIXct(df$Time, format="%H:%M:%OS", tz="UTC")
df_meteo$Time <- as.POSIXct(df_meteo$Time, format="%M:%OS", tz="UTC")
# Funzione per trovare il meteo più vicino
find_closest_meteo <- function(lap_time, meteo_data) {
time_diff <- abs(difftime(meteo_data$Time, lap_time, units="secs"))
closest_row <- meteo_data[which.min(time_diff), , drop = FALSE]  # Assicurati che ritorni un data frame
return(closest_row)
}
# Aggiungi i dati meteorologici ai giri del pilota "VER"
df_ver_bahrain <- df %>%
filter(Driver == "VER" & Circuit == "Bahrain Grand Prix") %>%
rowwise() %>%
mutate(closest_meteo = list(find_closest_meteo(Time, df_meteo)))
# Ora estrae correttamente i valori dalle righe di 'closest_meteo'
df_ver_bahrain <- df_ver_bahrain %>%
mutate(TrackTemp = closest_meteo[[1]]$TrackTemp,
Rainfall = closest_meteo[[1]]$Rainfall,
Humidity = closest_meteo[[1]]$Humidity) %>%
select(-closest_meteo)  # Rimuove la colonna "closest_meteo"
library(dplyr)
# Calcola statistiche per ogni mescola
statistiche_tempi <- dati %>%
group_by(Compound) %>%
summarise(
Media = mean(LapTimeSeconds, na.rm = TRUE),
Mediana = median(LapTimeSeconds, na.rm = TRUE),
Varianza = var(LapTimeSeconds, na.rm = TRUE),
DeviazioneStandard = sd(LapTimeSeconds, na.rm = TRUE)
)
library(dplyr)
dati <- read.csv("final.csv")
